// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/steve/pkg/stores/proxy_alpha (interfaces: Informer,ClientGetter,InformerFactory)

// Package proxy_alpha is a generated GoMock package.
package proxy_alpha

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "github.com/rancher/apiserver/pkg/types"
	informer "github.com/rancher/lasso/pkg/cache/sql/informer"
	partition "github.com/rancher/lasso/pkg/cache/sql/partition"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	dynamic "k8s.io/client-go/dynamic"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
	cache "k8s.io/client-go/tools/cache"
)

// MockInformer is a mock of Informer interface.
type MockInformer struct {
	ctrl     *gomock.Controller
	recorder *MockInformerMockRecorder
}

// MockInformerMockRecorder is the mock recorder for MockInformer.
type MockInformerMockRecorder struct {
	mock *MockInformer
}

// NewMockInformer creates a new mock instance.
func NewMockInformer(ctrl *gomock.Controller) *MockInformer {
	mock := &MockInformer{ctrl: ctrl}
	mock.recorder = &MockInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformer) EXPECT() *MockInformerMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockInformer) AddEventHandler(arg0 cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventHandler", arg0)
	ret0, _ := ret[0].(cache.ResourceEventHandlerRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockInformerMockRecorder) AddEventHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockInformer)(nil).AddEventHandler), arg0)
}

// AddEventHandlerWithResyncPeriod mocks base method.
func (m *MockInformer) AddEventHandlerWithResyncPeriod(arg0 cache.ResourceEventHandler, arg1 time.Duration) (cache.ResourceEventHandlerRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventHandlerWithResyncPeriod", arg0, arg1)
	ret0, _ := ret[0].(cache.ResourceEventHandlerRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEventHandlerWithResyncPeriod indicates an expected call of AddEventHandlerWithResyncPeriod.
func (mr *MockInformerMockRecorder) AddEventHandlerWithResyncPeriod(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandlerWithResyncPeriod", reflect.TypeOf((*MockInformer)(nil).AddEventHandlerWithResyncPeriod), arg0, arg1)
}

// AddIndexers mocks base method.
func (m *MockInformer) AddIndexers(arg0 cache.Indexers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndexers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndexers indicates an expected call of AddIndexers.
func (mr *MockInformerMockRecorder) AddIndexers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndexers", reflect.TypeOf((*MockInformer)(nil).AddIndexers), arg0)
}

// GetController mocks base method.
func (m *MockInformer) GetController() cache.Controller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetController")
	ret0, _ := ret[0].(cache.Controller)
	return ret0
}

// GetController indicates an expected call of GetController.
func (mr *MockInformerMockRecorder) GetController() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetController", reflect.TypeOf((*MockInformer)(nil).GetController))
}

// GetIndexer mocks base method.
func (m *MockInformer) GetIndexer() cache.Indexer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndexer")
	ret0, _ := ret[0].(cache.Indexer)
	return ret0
}

// GetIndexer indicates an expected call of GetIndexer.
func (mr *MockInformerMockRecorder) GetIndexer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndexer", reflect.TypeOf((*MockInformer)(nil).GetIndexer))
}

// GetStore mocks base method.
func (m *MockInformer) GetStore() cache.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(cache.Store)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockInformerMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockInformer)(nil).GetStore))
}

// HasSynced mocks base method.
func (m *MockInformer) HasSynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSynced indicates an expected call of HasSynced.
func (mr *MockInformerMockRecorder) HasSynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSynced", reflect.TypeOf((*MockInformer)(nil).HasSynced))
}

// IsStopped mocks base method.
func (m *MockInformer) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped.
func (mr *MockInformerMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockInformer)(nil).IsStopped))
}

// LastSyncResourceVersion mocks base method.
func (m *MockInformer) LastSyncResourceVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSyncResourceVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// LastSyncResourceVersion indicates an expected call of LastSyncResourceVersion.
func (mr *MockInformerMockRecorder) LastSyncResourceVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSyncResourceVersion", reflect.TypeOf((*MockInformer)(nil).LastSyncResourceVersion))
}

// ListByOptions mocks base method.
func (m *MockInformer) ListByOptions(arg0 context.Context, arg1 informer.ListOptions, arg2 []partition.Partition, arg3 string) (*unstructured.UnstructuredList, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOptions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOptions indicates an expected call of ListByOptions.
func (mr *MockInformerMockRecorder) ListByOptions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOptions", reflect.TypeOf((*MockInformer)(nil).ListByOptions), arg0, arg1, arg2, arg3)
}

// RemoveEventHandler mocks base method.
func (m *MockInformer) RemoveEventHandler(arg0 cache.ResourceEventHandlerRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEventHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEventHandler indicates an expected call of RemoveEventHandler.
func (mr *MockInformerMockRecorder) RemoveEventHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEventHandler", reflect.TypeOf((*MockInformer)(nil).RemoveEventHandler), arg0)
}

// Run mocks base method.
func (m *MockInformer) Run(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockInformerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInformer)(nil).Run), arg0)
}

// SetTransform mocks base method.
func (m *MockInformer) SetTransform(arg0 cache.TransformFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTransform", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTransform indicates an expected call of SetTransform.
func (mr *MockInformerMockRecorder) SetTransform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransform", reflect.TypeOf((*MockInformer)(nil).SetTransform), arg0)
}

// SetWatchErrorHandler mocks base method.
func (m *MockInformer) SetWatchErrorHandler(arg0 cache.WatchErrorHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWatchErrorHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWatchErrorHandler indicates an expected call of SetWatchErrorHandler.
func (mr *MockInformerMockRecorder) SetWatchErrorHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWatchErrorHandler", reflect.TypeOf((*MockInformer)(nil).SetWatchErrorHandler), arg0)
}

// MockClientGetter is a mock of ClientGetter interface.
type MockClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockClientGetterMockRecorder
}

// MockClientGetterMockRecorder is the mock recorder for MockClientGetter.
type MockClientGetterMockRecorder struct {
	mock *MockClientGetter
}

// NewMockClientGetter creates a new mock instance.
func NewMockClientGetter(ctrl *gomock.Controller) *MockClientGetter {
	mock := &MockClientGetter{ctrl: ctrl}
	mock.recorder = &MockClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientGetter) EXPECT() *MockClientGetterMockRecorder {
	return m.recorder
}

// AdminClient mocks base method.
func (m *MockClientGetter) AdminClient(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminClient indicates an expected call of AdminClient.
func (mr *MockClientGetterMockRecorder) AdminClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminClient", reflect.TypeOf((*MockClientGetter)(nil).AdminClient), arg0, arg1, arg2, arg3)
}

// AdminK8sInterface mocks base method.
func (m *MockClientGetter) AdminK8sInterface() (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminK8sInterface")
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminK8sInterface indicates an expected call of AdminK8sInterface.
func (mr *MockClientGetterMockRecorder) AdminK8sInterface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminK8sInterface", reflect.TypeOf((*MockClientGetter)(nil).AdminK8sInterface))
}

// Client mocks base method.
func (m *MockClientGetter) Client(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Client indicates an expected call of Client.
func (mr *MockClientGetterMockRecorder) Client(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockClientGetter)(nil).Client), arg0, arg1, arg2, arg3)
}

// DynamicClient mocks base method.
func (m *MockClientGetter) DynamicClient(arg0 *types.APIRequest, arg1 rest.WarningHandler) (dynamic.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynamicClient", arg0, arg1)
	ret0, _ := ret[0].(dynamic.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DynamicClient indicates an expected call of DynamicClient.
func (mr *MockClientGetterMockRecorder) DynamicClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynamicClient", reflect.TypeOf((*MockClientGetter)(nil).DynamicClient), arg0, arg1)
}

// IsImpersonating mocks base method.
func (m *MockClientGetter) IsImpersonating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImpersonating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsImpersonating indicates an expected call of IsImpersonating.
func (mr *MockClientGetterMockRecorder) IsImpersonating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImpersonating", reflect.TypeOf((*MockClientGetter)(nil).IsImpersonating))
}

// K8sInterface mocks base method.
func (m *MockClientGetter) K8sInterface(arg0 *types.APIRequest) (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "K8sInterface", arg0)
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// K8sInterface indicates an expected call of K8sInterface.
func (mr *MockClientGetterMockRecorder) K8sInterface(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "K8sInterface", reflect.TypeOf((*MockClientGetter)(nil).K8sInterface), arg0)
}

// TableAdminClient mocks base method.
func (m *MockClientGetter) TableAdminClient(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableAdminClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableAdminClient indicates an expected call of TableAdminClient.
func (mr *MockClientGetterMockRecorder) TableAdminClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableAdminClient", reflect.TypeOf((*MockClientGetter)(nil).TableAdminClient), arg0, arg1, arg2, arg3)
}

// TableAdminClientForWatch mocks base method.
func (m *MockClientGetter) TableAdminClientForWatch(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableAdminClientForWatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableAdminClientForWatch indicates an expected call of TableAdminClientForWatch.
func (mr *MockClientGetterMockRecorder) TableAdminClientForWatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableAdminClientForWatch", reflect.TypeOf((*MockClientGetter)(nil).TableAdminClientForWatch), arg0, arg1, arg2, arg3)
}

// TableClient mocks base method.
func (m *MockClientGetter) TableClient(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableClient", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableClient indicates an expected call of TableClient.
func (mr *MockClientGetterMockRecorder) TableClient(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableClient", reflect.TypeOf((*MockClientGetter)(nil).TableClient), arg0, arg1, arg2, arg3)
}

// TableClientForWatch mocks base method.
func (m *MockClientGetter) TableClientForWatch(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableClientForWatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dynamic.ResourceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableClientForWatch indicates an expected call of TableClientForWatch.
func (mr *MockClientGetterMockRecorder) TableClientForWatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableClientForWatch", reflect.TypeOf((*MockClientGetter)(nil).TableClientForWatch), arg0, arg1, arg2, arg3)
}

// MockInformerFactory is a mock of InformerFactory interface.
type MockInformerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockInformerFactoryMockRecorder
}

// MockInformerFactoryMockRecorder is the mock recorder for MockInformerFactory.
type MockInformerFactoryMockRecorder struct {
	mock *MockInformerFactory
}

// NewMockInformerFactory creates a new mock instance.
func NewMockInformerFactory(ctrl *gomock.Controller) *MockInformerFactory {
	mock := &MockInformerFactory{ctrl: ctrl}
	mock.recorder = &MockInformerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformerFactory) EXPECT() *MockInformerFactoryMockRecorder {
	return m.recorder
}

// InformerFor mocks base method.
func (m *MockInformerFactory) InformerFor(arg0 [][]string, arg1 dynamic.ResourceInterface, arg2 schema.GroupVersionKind, arg3 bool) (*informer.Informer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InformerFor", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*informer.Informer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InformerFor indicates an expected call of InformerFor.
func (mr *MockInformerFactoryMockRecorder) InformerFor(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InformerFor", reflect.TypeOf((*MockInformerFactory)(nil).InformerFor), arg0, arg1, arg2, arg3)
}

// Reset mocks base method.
func (m *MockInformerFactory) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockInformerFactoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockInformerFactory)(nil).Reset))
}
